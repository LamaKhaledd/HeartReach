// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: users.sql

package db

import (
	"context"
	"database/sql"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (email, user_name, password, phone_number, role, location)
VALUES (?, ?, ?, ?, ?, ?)
RETURNING id, email, user_name, password, phone_number, role, location, created_at
`

type CreateUserParams struct {
	Email       string
	UserName    string
	Password    string
	PhoneNumber sql.NullString
	Role        string
	Location    sql.NullString
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.Email,
		arg.UserName,
		arg.Password,
		arg.PhoneNumber,
		arg.Role,
		arg.Location,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.UserName,
		&i.Password,
		&i.PhoneNumber,
		&i.Role,
		&i.Location,
		&i.CreatedAt,
	)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, email, user_name, password, phone_number, role, location, created_at FROM users WHERE email = ? LIMIT 1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.UserName,
		&i.Password,
		&i.PhoneNumber,
		&i.Role,
		&i.Location,
		&i.CreatedAt,
	)
	return i, err
}

const listUsers = `-- name: ListUsers :many
SELECT id, email, user_name, password, phone_number, role, location, created_at FROM users ORDER BY created_at DESC
`

func (q *Queries) ListUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, listUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Email,
			&i.UserName,
			&i.Password,
			&i.PhoneNumber,
			&i.Role,
			&i.Location,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
